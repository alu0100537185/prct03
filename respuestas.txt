Waldo Nazco Torres

Respuesta a las cuestiones de la práctica nº3

18. Escriba el programa que muestra por la consola la frase "Hola Mundo". ¿Qué significado tienela salida? (puts ’Hola Mundo’)

Respuesta = Muestra por pantalla el mensaje 'Hola Mundo' ya que puts sirve para mostrar por pantalla retornando nil.

21. ¿Qué diferencia hay entre "\t\n" y ’\t\n’?

Respuesta: "\t\n" utilizando comillas dobles interpreta y muestra un tabuluador y un salto de linea.
	   '\t\n' usando comillas simples interpreta y muestra una cadena literal "\\t\\n".


22. ¿Cómo funciona %q? ¿Qué es %q{hello world\n}? ¿Qué es %q{’a’ ’b’ ’c’}?

Respuesta: su funcionamiento es la de delimitador simple de cadenas. Delimita las cadenas entre comillas simples. El salto de linea no lo interpreta.

23. ¿Cómo funciona %Q? ¿Qué es %Q{hello world\n}? ¿Qué es %Q{"a" "b" "c"}?

Respuesta: Es un delimitador doble para cadenas entre comillas dobles y duplica el simbolo \.

24. ¿Qué queda en c?

irb(main):001:0> a = 4
=> 4
irb(main):002:0> b =2
=> 2
irb(main):003:0> c = <<HERE
irb(main):004:0" --#{a}--
irb(main):005:0" --#{b}--
irb(main):006:0" HERE

Respuesta: En c quedará almacenado las variables almacenadas en a y b, es decir, 4 y 2.

25. ¿Qué queda en c?

irb(main):001:0> a = 4
=> 4
irb(main):002:0> b =2
=> 2
irb(main):008:0> c = <<’HERE’
irb(main):009:0’ --#{a}--
irb(main):010:0’ --#{b}--
irb(main):011:0’ HERE

Respuesta: Almacenara en c las cadenas de forma literal, ya que se encuentra en comillas simples o lo que es lo mismo:

--#{a}-- y --#{b}

26. s = "hello". ¿Cúal es el valor de las siguientes expresiones?

s[0,2]
s[-1,1]
s[0,10]

Respuesta: "he" ,"o" y "hello". 

27. ¿Qué queda en g?

>> g = "hello"
=> "hello"
>> g << " world"

Respuesta: En g quedará la cadena "hello world", ya que se concatenan los elementos.


28. ¿Qué queda en e?

>> e = ’.’*3

Respuesta: En e quedará almacenada la repetición del punto 3 veces ya que el simbolo * repetirá tantas veces como se indique el simbolo '.'

29. ¿Cuál es el resultado?

>> a = 1
=> 1
>> "#{a=a+1} "*3

Respesta: => 2 2 2

30. ¿Qué es esto?

%w[this is a test]

Respuesta: => ["this", "is", "a", "test"]
	   Un array de tipo cadenas que almacena 3 elementos.

31. ¿Qué es esto?

%w[\t \n]

Respuesta: => ["\\t", "\\n"]
	   Un array que contiene los caracteres \t y \n y duplica las \.

32. ¿Qué es esto?

%W[\t \n]

Respuesta: ["\t", "\n"]
	   Un array que contiene una tabulación y un salto de linea. 

33. ¿Qué contiene nils?

nils = Array.new(3)

Respuesta: => [nil, nil, nil]
	   Un array con 3 elementos nulos.

34. ¿Qué contiene zeros?

zeros = Array.new(3, 0)

Respuest: => [0, 0, 0]
	  Un array con 3 elementos de valor 0.

35. ¿Qué queda en b?

>> x = [[1,2],[3,4]]
=> [[1, 2], [3, 4]]
>> b = Array.new(x)

Respuesta: [[1, 2], [3, 4]]

36. ¿Qué queda en c?

>> c = Array.new(3) { |i| 2*i }

Respuesta: [0, 2, 4]

37. ¿Cuál es el resultado de cada una de estas operaciones?

>> a = (’a’..’e’).to_a
=> ["a", "b", "c", "d", "e"]
>> a[1,1]
=>
>> a[-2,2]
=>
>> a[0..2]
=>
>> a[0...1]
=>
>> a[-2..-1]
=>

Respuesta: >> a = (’a’..’e’).to_a
           => ["a", "b", "c", "d", "e"]
           >> a[1,1]
           => [“b”]
           >> a[-2,2]
           => ["d", "e"]
           >> a[0..2]
           => ["a", "b", "c"]    
           >> a[0...1]
           => ["a"]
           >> a[-2..-1]
           => ["d", "e"]

38. ¿Cuál es el resultado de cada una de estas operaciones?

>> a
=> ["a", "b", "c", "d", "e"]
>> a[0,2] = %w{A B}
=> ["A", "B"]
>> a
=>
>> a[2..5] = %w{C D E}
=> ["C", "D", "E"]
>> a
=>
>> a[0,0] = [1,2,3]
=> [1, 2, 3]
>> a
=>
>> a[0,2] = []
=> []
>> a
3
=>
>> a[-1,1] = [ ’Z’ ]
=> ["Z"]
>> a
=>
>> a[-2,2] = nil
=> nil
>> a
=>

Respuesta: >> a
           => ["a", "b", "c", "d", "e"]
    	   >> a[0,2] = %w{A B}
           => ["A", "B"]
           >> a
           => ["A", "B", "c", "d", "e"]
           >> a[2..5] = %w{C D E}
           => ["C", "D", "E"]
           >> a
           => ["A", "B", "C", "D", "E"]
           >> a[0,0] = [1,2,3]
           => [1, 2, 3]
           >> a
           => [1, 2, 3, 3, "A", "B", "C", "D", "E"]
           >> a[0,2] = []
           => []
           >> a
           => [3, 3, "A", "B", "C", "D", "E"]
           >> a[-1,1] = [ ’Z’ ]
           => ["Z"]
           >> a
           => ["a", "b", "c", "d", "Z"]
           >> a[-2,2] = nil
           => nil
           >> a
           => ["a", "b", "c"]                


39. ¿Cuál es el resultado de cada una de estas operaciones?

>> a = (1...4).to_a
=>
>> a = a + [4, 5]
=>
>> a += [[6, 7, 8]]
=>
>> a = a + 9

Respuesta: >> a = (1...4).to_a
           => [1, 2, 3, 4]
           >> a = a + [4, 5]
           => [1, 2, 3, 4, 4, 5]
           >> a += [[6, 7, 8]]
           => [1, 2, 3, 4, 4, 5, [6, 7, 8]]
           >> a = a + 9
           TypeError: can't convert Fixnum into Array

40. ¿Cuál es el resultado de cada una de estas operaciones?

>> x = %w{a b c b a}
=>
>> x = x - %w{b c d}
=>

Respuesta: >> x = %w{a b c b a}
           => ["a", "b", "c", "b", "a"]
           >> x = x - %w{b c d}
           => ["a", "a"]

41. ¿Cuál es el resultado de cada una de estas operaciones?

>> z = [0]*8
=>

Respuesta:  >> z = [0]*8
            => [0, 0, 0, 0, 0, 0, 0, 0]

42. ¿Cuál es el resultado de cada una de estas operaciones?

>> a = []
=> []
>> a << 1
=>
>> a << 2 << 3
=>
>> a << [4, 5, 6]
=>
>> a.concat [7, 8]
=>

Respuesta:  >> a = []
            => []
            >> a << 1
            => [1]
            >> a << 2 << 3
            => [1, 2, 3]
            >> a << [4, 5, 6]
            => [1, 2, 3, [4, 5, 6]]
            >> a.concat [7, 8]
            => [1, 2, 3, [4, 5, 6], 7, 8]

43. ¿Cuál es el resultado de cada una de estas operaciones?

>> a = [1, 1, 2, 2, 3, 3, 4]
=> [1, 1, 2, 2, 3, 3, 4]
>> b = [5, 5, 4, 4, 3, 3, 2]
=> [5, 5, 4, 4, 3, 3, 2]
>> c = a | b
=>
>> d = b | a
=>
>> e = a & b
=>
>> f = b & a
=>

Respuesta: >> a = [1, 1, 2, 2, 3, 3, 4]
           => [1, 1, 2, 2, 3, 3, 4]
           >> b = [5, 5, 4, 4, 3, 3, 2]
           => [5, 5, 4, 4, 3, 3, 2]
           >> c = a | b
           => [1, 2, 3, 4, 5]
           >> d = b | a
           => [5, 4, 3, 2, 1]
           >> e = a & b
           => [2, 3, 4]
           >> f = b & a
           => [4, 3, 2]

44. ¿Qué resultados dan las siguientes operaciones?

4
>> a = 1..10
=> 1..10
>> a.class
=> Range
>> a.to_a
=>
>> b = 1...10
=> 1....10
>> b.to_a
=>
>> b.include? 10
=>
>> b.include? 8
=>
>> b.step(2) {|x| print "#{x} " }
>> 1..3.to_a

Respuesta:  >> a = 1..10
            => 1..10
            >> a.class
            => Range
            >> a.to_a
            => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]	
            >> b = 1...10
            => 1....10
            >> b.to_a
            => [1, 2, 3, 4, 5, 6, 7, 8, 9]
            >> b.include? 10
            => false
            >> b.include? 8
            => true
            >> b.step(2) {|x| print "#{x} " }
            => 1 3 5 7 9 => 1...10
            >> 1..3.to_a


45. ¿Qué resultados dan las siguientes operaciones?

>> r = 0...100
=> 0....100
>> r.member? 50
=>
>> r.include? 99.9
=>
>> r.member? 99.9
=>

Respuesta: >> r = 0...100
           => 0....100
           >> r.member? 50
           => true
           >> r.include? 99.9
           => true
           >> r.member? 99.9
           => true
46. ¿Qué resultados dan las siguientes operaciones?

>> true.class
=>
>> false.class
=>
>> puts "hello" if 0
=>
>> puts "hello" if nil
=>
>> puts "hello" if ""
=>

Respuesta: >> true.class
           => TrueClass
           >> false.class
           => FalseClass        
           >> puts "hello" if 0
           hello
           => nil
           >> puts "hello" if nil
           => nil
           >> puts "hello" if ""
           (irb):49: warning: string literal in condition           
           hello
           => nil

47. ¿Qué resultados dan las siguientes operaciones?

>> x = :sym
=> :sym
>> x.class
=>
>> x == ’sym’
=>
>> x == :sym
=>
>> z = :’a long symbol’
=> :"a long symbol"
>> z.class
=>
>> x == ’sym’.to_sym
=>
>> x.to_s == ’sym’
=>

Respuesta: >> x = :sym
           => :sym
           >> x.class
           =>Symbol
           >> x == ’sym’
           =>false
           >> x == :sym
           =>true
           >> z = :’a long symbol’
           => :”a long symbol”
           >> z.class
           => Symbol
           >> x == ’sym’.to_sym
           => true
           >> x.to_s == ’sym’
           => true


48. ¿Qué resultados se dan?

>> s = "Ruby"
=> "Ruby"
5
>> t = s
=> "Ruby"
>> t[-1] = ""
=> ""
>> print s
>> t = "Java"
=> "Java"
>> print s, t

Respuesta: >> s = "Ruby"
           => "Ruby"
           >> t = s
           => "Ruby"
           >> t[-1] = ""
           => ""
           >> print s
           Rub=> nil
           >> t = "Java"
           => "Java"
           >> print s, t
           RubJava=> nil

49. ¿Cuál es el resultado?

>> "%d %s" % [3, "rubies"]
=>

Respuesta: >> "%d %s" % [3, "rubies"]
           => “3 rubies”

50. ¿Cuáles son los resultados?

>> x, y = 4, 5
=>
>> z = x > y ? x : y
=>
>> x,y,z = [1,2,3]
=>

Respuesta: >> x, y = 4, 5
           => [4, 5]
           >> z = x > y ? x : y
           => 5
           >> x,y,z = [1,2,3]
           => [1, 2, 3]

51. ¿Qué resultados dan las siguientes operaciones?

>> x = { :a => 1, :b => 2 }
=> {:b=>2, :a=>1}
>> x.keys
=>
>> x.values
=>
>> x[:c] = 3
=> 3
>> x
=>
>> x.delete(’a’)
=> nil
>> x
=>
>> x.delete(:a)
=> 1
>> x
=>
>> x = { :a => 1, :b => 2, :c => 4 }
=> {:b=>2, :c=>4, :a=>1}
>> x.delete_if { |k,v| v % 2 == 0 }
=>
>> x
=>

Respuesta: >> x = { :a => 1, :b => 2 }
           => {:a=>1, :b=>2}
           >> x.keys
           => [:a, :b]
           >> x.values
           => [1, 2]
           >> x[:c] = 3
           => 3
           >> x
           => {:a=>1, :b=>2, :c=>3}
           >> x.delete(’a’)
           => nil
           >> x
           =>{:a=>1, :b=>2, :c=>3}
           >> x.delete(:a)
           => 1
           >> x
           =>{:b=>2, :c=>3}
           >> x = { :a => 1, :b => 2, :c => 4 }
           => {:b=>2, :c=>4, :a=>1}
           >> x.delete_if { |k,v| v % 2 == 0 }
           => {:a=>1}
           >> x
           => {:a=>1}


52. ¿Qué hace yield 4, 5?

Respuesta: Metodo que puede usar el bloque mediante la palabra yield. Se proporcionan parametros a la llamada yield que son pasados al bloque.

53. ¿Qué hace la siguiente sentencia? ¿Qué diferencia hay con la asignación counts = {}?

counts = Hash.new(0)

Respuesta: counts = Hash.new(0) crea un Hash de 0 elementos
	   counts={} crea un array de 0 elementos.


54. ¿Qué retorna esta expresión?

’hello world, hello LPP’.scan /\w+/

Respuesta: => ["hello", "world", "hello", "LPP"]

55. Explique que hacen estas sentencias:

c = { :a => 3, :b => 2, :c => 1 }
c.keys.sort.each { |k| puts c[k] }

Respuesta: c = { :a => 3, :b => 2, :c => 1 }
           => {:a=>3, :b=>2, :c=>1}
           c.keys.sort.each { |k| puts c[k] }
           3
           2
           1
           => [:a, :b, :c]

Se crea un hash literal indicando parejas clave-valor y acto seguido se ordenan los valores mediante el metodo sort.



	   


